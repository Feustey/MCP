# Configuration Nginx pour api.dazno.de
# Dernière mise à jour: 7 mai 2025

# Rate limiting global
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=api_burst:10m rate=50r/s;

# Limite stricte pour les API sensibles
limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

server {
    listen 80;
    server_name api.dazno.de;
    server_tokens off;
    
    # Redirection vers HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

server {
    listen 443 ssl http2;
    server_name api.dazno.de;
    server_tokens off;
    
    # Configuration SSL
    ssl_certificate /etc/letsencrypt/live/api.dazno.de/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.dazno.de/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # Configuration SSL moderne
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # HSTS (uncomment if you're sure)
    # add_header Strict-Transport-Security "max-age=63072000" always;

    # Headers de sécurité
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';";

    # Variables pour contrôle d'accès par origine
    set $allowed_origin "";
    if ($http_origin ~* "^https://(app\.dazno\.de|dazno\.de|localhost:3000)$") {
        set $allowed_origin $http_origin;
    }
    
    # Configuration CORS sécurisée
    add_header Access-Control-Allow-Origin $allowed_origin always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With, X-API-Key" always;
    add_header Access-Control-Allow-Credentials true always;
    add_header Access-Control-Max-Age 3600 always;
    
    # Gestion des requêtes OPTIONS (preflight)
    if ($request_method = 'OPTIONS') {
        add_header Access-Control-Allow-Origin $allowed_origin;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With, X-API-Key";
        add_header Access-Control-Allow-Credentials true;
        add_header Access-Control-Max-Age 3600;
        add_header Content-Length 0;
        add_header Content-Type text/plain;
        return 200;
    }
    
    # Variable pour le blocage des User-Agents
    set $block_ua 0;
    
    # Blocage des bots et crawlers malveillants (sauf pour /health)
    if ($http_user_agent ~* (bot|crawler|spider|scraper|scanner|wget|curl|python|perl|ruby|java)) {
        set $block_ua 1;
    }
    
    # Exception pour les IPs locales
    if ($remote_addr ~* "^127\.0\.0\.1|^10\.|^172\.16\.|^192\.168\.") {
        set $block_ua 0;
    }
    
    # Exception pour les endpoints de santé
    if ($request_uri ~* "^/health") {
        set $block_ua 0;
    }
    
    # Application du blocage si nécessaire
    if ($block_ua = 1) {
        return 403;
    }
    
    # Blocage des tentatives d'injection
    if ($request_uri ~* "(union|select|insert|delete|update|drop|create|alter|exec|script|javascript|vbscript|onload|onerror)") {
        return 403;
    }
    
    # Proxy vers l'API FastAPI
    location / {
        proxy_pass http://mcp-api:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Endpoint de santé
    location /health {
        proxy_pass http://mcp-api:8000/health;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        
        # Autoriser uniquement les requêtes internes
        allow 127.0.0.1;
        allow 172.16.0.0/12;  # Réseau Docker
        deny all;
    }

    # Documentation API
    location /docs {
        proxy_pass http://mcp-api:8000/docs;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Métriques Prometheus (protégées)
    location /metrics {
        proxy_pass http://mcp-api:8000/metrics;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        
        # Autoriser uniquement les requêtes internes
        allow 127.0.0.1;
        allow 172.16.0.0/12;  # Réseau Docker
        deny all;
    }

    # Gestion des erreurs
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
} 