"""
Exemple d'utilisation des clients LNBits unifi√©s.

Ce script montre comment utiliser les diff√©rents clients LNBits pour:
1. V√©rifier le solde du wallet
2. Cr√©er et payer des factures
3. G√©rer les canaux et leurs politiques de frais
"""

import asyncio
import logging
import os
from datetime import datetime
from dotenv import load_dotenv

from src.unified_clients import (
    LNBitsClient,
    LNBitsChannelClient,
    ChannelPolicy,
    LNBitsError
)

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Charger les variables d'environnement
load_dotenv()

# R√©cup√©rer les cl√©s API depuis les variables d'environnement
LNBITS_URL = os.getenv("LNBITS_URL", "https://demo.lnbits.com")
INVOICE_KEY = os.getenv("LNBITS_INVOICE_KEY")
ADMIN_KEY = os.getenv("LNBITS_ADMIN_KEY")

async def demo_wallet_operations():
    """D√©montre les op√©rations de base du wallet"""
    logger.info("=== D√©mo des op√©rations de wallet ===")
    
    # Cr√©er le client principal
    client = LNBitsClient(
        url=LNBITS_URL,
        invoice_key=INVOICE_KEY,
        admin_key=ADMIN_KEY
    )
    
    try:
        # V√©rifier la connexion
        if await client.check_connection():
            logger.info("‚úÖ Connexion √† LNBits √©tablie")
        else:
            logger.error("‚ùå Impossible de se connecter √† LNBits")
            return
        
        # R√©cup√©rer les informations du wallet
        wallet_info = await client.get_wallet_details()
        logger.info(f"üìä Informations du wallet: ID={wallet_info.id}, Nom={wallet_info.name}")
        logger.info(f"üí∞ Solde: {wallet_info.balance} sats")
        
        # Cr√©er une facture
        invoice = await client.create_invoice(
            amount=100,
            memo="Test de l'API unifi√©e LNBits"
        )
        logger.info(f"üßæ Facture cr√©√©e: {invoice.payment_request[:30]}...")
        logger.info(f"üìù Hash de paiement: {invoice.payment_hash}")
        
        # V√©rifier le statut de la facture
        paid = await client.check_invoice_status(invoice.payment_hash)
        logger.info(f"üí≤ Statut de la facture: {'Pay√©e' if paid else 'Non pay√©e'}")
        
        # R√©cup√©rer l'historique des paiements
        payments = await client.get_payments(limit=5)
        logger.info(f"üìú Derniers paiements: {len(payments)} entr√©es")
        for payment in payments[:3]:  # Afficher les 3 premiers
            logger.info(f"  - {payment.get('amount')} sats, {payment.get('time')}")
    
    except LNBitsError as e:
        logger.error(f"‚ùå Erreur LNBits: {e}")
    except Exception as e:
        logger.error(f"‚ùå Erreur inattendue: {e}")
    finally:
        await client.close()

async def demo_channel_operations():
    """D√©montre les op√©rations sur les canaux"""
    logger.info("\n=== D√©mo des op√©rations sur les canaux ===")
    
    # Cr√©er le client de gestion des canaux
    channel_client = LNBitsChannelClient(
        url=LNBITS_URL,
        admin_key=ADMIN_KEY
    )
    
    try:
        # R√©cup√©rer la liste des canaux
        channels = await channel_client.list_channels()
        logger.info(f"üìä Nombre total de canaux: {len(channels)}")
        
        # Afficher les canaux actifs
        active_channels = [c for c in channels if c.active]
        logger.info(f"‚úÖ Canaux actifs: {len(active_channels)}/{len(channels)}")
        
        for channel in active_channels[:3]:  # Afficher les 3 premiers canaux actifs
            logger.info(f"  - Canal {channel.short_id or channel.id[:10]}")
            logger.info(f"    Capacit√©: {channel.capacity} sats")
            logger.info(f"    Balance locale: {channel.local_balance} sats")
            logger.info(f"    Balance distante: {channel.remote_balance} sats")
            logger.info(f"    Frais actuels: {channel.fee_base_msat} msat + {channel.fee_rate_ppm} ppm")
        
        # R√©cup√©rer les soldes globaux des canaux
        balances = await channel_client.get_channel_balances()
        logger.info(f"üí∞ Solde total des canaux: {balances['total_balance']} sats")
        
        # R√©cup√©rer l'historique de forwarding
        today = datetime.now().strftime("%Y-%m-%d")
        one_month_ago = datetime.now().replace(month=datetime.now().month-1).strftime("%Y-%m-%d")
        
        forwarding = await channel_client.get_forwarding_history(
            start_date=one_month_ago,
            end_date=today,
            limit=10
        )
        
        logger.info(f"üîÑ Transactions de forwarding r√©centes: {len(forwarding)}")
        total_fees = sum(tx.get('fee', 0) for tx in forwarding)
        logger.info(f"üí∏ Frais totaux collect√©s: {total_fees} sats")
        
        # Exemple de mise √† jour de politique de frais (comment√© pour √©viter les modifications accidentelles)
        """
        if active_channels:
            # Cr√©er une nouvelle politique
            new_policy = ChannelPolicy(
                base_fee_msat=1000,  # 1 sat
                fee_rate_ppm=500,    # 0.05%
                min_htlc_msat=1000   # 1 sat
            )
            
            # Mettre √† jour la politique d'un canal sp√©cifique
            channel = active_channels[0]
            if channel.channel_point:
                success = await channel_client.update_channel_policy(
                    channel_point=channel.channel_point,
                    policy=new_policy
                )
                logger.info(f"üîÑ Mise √† jour de la politique: {'R√©ussie' if success else '√âchou√©e'}")
        """
    
    except LNBitsError as e:
        logger.error(f"‚ùå Erreur LNBits: {e}")
    except Exception as e:
        logger.error(f"‚ùå Erreur inattendue: {e}")
    finally:
        await channel_client.close()

async def main():
    """Fonction principale"""
    logger.info("D√©marrage de la d√©mo des clients LNBits unifi√©s")
    
    # Ex√©cuter les d√©mos
    await demo_wallet_operations()
    await demo_channel_operations()
    
    logger.info("D√©mo termin√©e")

if __name__ == "__main__":
    asyncio.run(main()) 