#!/bin/bash

# Script principal de d√©ploiement pour api.dazno.de
# Ce script orchestre le d√©ploiement complet de l'API avec SSL

set -e

# Variables
DOMAIN="api.dazno.de"
APP_DIR="/var/www/mcp"
SCRIPTS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Fonction pour afficher la progression
show_step() {
    echo -e "\nüöÄ √âtape $1/$2: $3"
}

# Fonction pour v√©rifier les pr√©requis
check_prerequisites() {
    echo "üîç V√©rification des pr√©requis..."
    
    # V√©rification de l'utilisateur root
    if [ "$EUID" -ne 0 ]; then
        echo "‚ùå Ce script doit √™tre ex√©cut√© en tant que root"
        exit 1
    fi

    # V√©rification de Docker
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker n'est pas install√©"
        exit 1
    fi

    # V√©rification de Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        echo "‚ùå Docker Compose n'est pas install√©"
        exit 1
    fi

    # V√©rification de Nginx
    if ! command -v nginx &> /dev/null; then
        echo "‚ùå Nginx n'est pas install√©"
        exit 1
    fi

    echo "‚úÖ Tous les pr√©requis sont satisfaits"
}

# Fonction pour pr√©parer l'environnement
prepare_environment() {
    echo "üîß Pr√©paration de l'environnement..."
    
    # Cr√©ation des r√©pertoires n√©cessaires
    mkdir -p "$APP_DIR"
    
    # V√©rification des scripts n√©cessaires
    for script in clean_nginx_config.sh deploy_ssl_complete.sh verify_ssl.sh; do
        if [ ! -f "$SCRIPTS_DIR/$script" ]; then
            echo "‚ùå Script manquant : $script"
            exit 1
        fi
        chmod +x "$SCRIPTS_DIR/$script"
    done
}

# Fonction pour le d√©ploiement
deploy() {
    local total_steps=4
    
    # √âtape 1: Nettoyage de la configuration Nginx
    show_step 1 $total_steps "Nettoyage de la configuration Nginx"
    bash "$SCRIPTS_DIR/clean_nginx_config.sh"
    
    # √âtape 2: D√©ploiement SSL
    show_step 2 $total_steps "D√©ploiement SSL"
    bash "$SCRIPTS_DIR/deploy_ssl_complete.sh"
    
    # √âtape 3: V√©rification du d√©ploiement
    show_step 3 $total_steps "V√©rification du d√©ploiement"
    bash "$SCRIPTS_DIR/verify_ssl.sh"
    
    # √âtape 4: Tests finaux
    show_step 4 $total_steps "Tests finaux"
    echo "üåê Test de l'API..."
    if curl -s -o /dev/null -w "%{http_code}" "https://$DOMAIN/health"; then
        echo "‚úÖ L'API r√©pond correctement"
    else
        echo "‚ùå L'API ne r√©pond pas correctement"
        echo "üìã Logs des conteneurs :"
        cd "$APP_DIR" && docker-compose logs --tail=50
        exit 1
    fi
}

# Fonction principale
main() {
    echo "üöÄ D√©but du d√©ploiement pour $DOMAIN"
    
    # V√©rification des pr√©requis
    check_prerequisites
    
    # Pr√©paration de l'environnement
    prepare_environment
    
    # D√©ploiement
    deploy
    
    echo -e "\n‚ú® D√©ploiement termin√© avec succ√®s !"
    echo "üìã V√©rifiez https://$DOMAIN dans votre navigateur"
}

# Ex√©cution du script
main 