#!/bin/bash

# Script de relance Coolify sur Hostinger
# Derni√®re mise √† jour: 7 janvier 2025

set -euo pipefail

# Configuration
REMOTE_USER="feustey"
REMOTE_HOST="147.79.101.32"
REMOTE_DIR="/home/$REMOTE_USER/feustey"
SSH_KEY="/Users/stephanecourant/.ssh/id_ed25519"
SSH_OPTIONS="-i $SSH_KEY -o StrictHostKeyChecking=no -o ConnectTimeout=30"
SUDO_PWD="Feustey@AI!"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fonctions utilitaires
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "[${timestamp}] [${level}] ${message}"
}

info() {
    log "INFO" "${BLUE}$*${NC}"
}

warn() {
    log "WARN" "${YELLOW}$*${NC}"
}

error() {
    log "ERROR" "${RED}$*${NC}"
    exit 1
}

success() {
    log "SUCCESS" "${GREEN}$*${NC}"
}

# V√©rification de la connectivit√© SSH uniquement
check_connectivity() {
    info "üîç V√©rification de la connectivit√© SSH vers Hostinger..."
    
    if ! ssh $SSH_OPTIONS "$REMOTE_USER@$REMOTE_HOST" "echo 'Connexion SSH OK'" &> /dev/null; then
        error "‚ùå √âchec de la connexion SSH vers $REMOTE_USER@$REMOTE_HOST"
    fi
    
    success "‚úÖ Connectivit√© SSH OK"
}

# Diagnostic des services
diagnose_services() {
    info "üîç Diagnostic des services sur Hostinger..."
    
    ssh $SSH_OPTIONS "$REMOTE_USER@$REMOTE_HOST" << 'EOF'
        echo "=== √âtat des conteneurs Docker ==="
        docker ps -a
        
        echo -e "\n=== Logs des conteneurs MCP ==="
        if docker ps | grep -q "mcp-api"; then
            docker logs --tail=20 mcp-api
        else
            echo "‚ùå Conteneur mcp-api non trouv√©"
        fi
        
        echo -e "\n=== Utilisation des ressources ==="
        df -h
        free -h
        
        echo -e "\n=== Services syst√®me ==="
        systemctl status docker --no-pager || true
        systemctl status nginx --no-pager || true
        
        echo -e "\n=== Ports en √©coute ==="
        netstat -tlnp | grep -E ':(80|443|8000|8080|8443|3000|9090)' || true
EOF
}

# Arr√™t forc√© des services
force_stop_services() {
    info "üõë Arr√™t forc√© des services..."
    
    ssh $SSH_OPTIONS "$REMOTE_USER@$REMOTE_HOST" << EOF
        cd "$REMOTE_DIR"
        
        # Arr√™t de tous les conteneurs MCP
        echo "$SUDO_PWD" | sudo -S docker-compose down --remove-orphans || true
        echo "$SUDO_PWD" | sudo -S docker-compose -f docker-compose.hostinger-production.yml down --remove-orphans || true
        
        # Arr√™t forc√© des conteneurs par nom
        docker stop mcp-api mcp-nginx mcp-prometheus mcp-grafana 2>/dev/null || true
        docker rm mcp-api mcp-nginx mcp-prometheus mcp-grafana 2>/dev/null || true
        
        # Nettoyage des conteneurs orphelins
        echo "$SUDO_PWD" | sudo -S docker system prune -f
        
        # Red√©marrage du service Docker si n√©cessaire
        echo "$SUDO_PWD" | sudo -S systemctl restart docker
        
        echo "‚úÖ Services arr√™t√©s et nettoy√©s"
EOF
}

# V√©rification et cr√©ation du fichier .env.production
check_env_file() {
    info "üìã V√©rification du fichier .env.production..."
    
    # V√©rifier si le fichier existe localement
    if [ ! -f ".env.production" ]; then
        warn "‚ö†Ô∏è  Fichier .env.production non trouv√© localement"
        
        # Cr√©er le fichier √† partir du template
        if [ -f "config/env.production.template" ]; then
            info "üìù Cr√©ation du fichier .env.production √† partir du template..."
            cp config/env.production.template .env.production
            warn "‚ö†Ô∏è  Veuillez configurer les variables dans .env.production avant de continuer"
            echo "Variables √† configurer:"
            echo "   - MONGO_ROOT_PASSWORD"
            echo "   - SPARKSEER_API_KEY"
            echo "   - TELEGRAM_BOT_TOKEN"
            echo "   - TELEGRAM_CHAT_ID"
            read -p "Appuyez sur Entr√©e apr√®s avoir configur√© le fichier .env.production..."
        else
            error "‚ùå Template .env.production.template non trouv√©"
        fi
    fi
    
    success "‚úÖ Fichier .env.production v√©rifi√©"
}

# Relance des services
restart_services() {
    info "üöÄ Relance des services..."
    
    # Transf√©rer le fichier .env.production
    scp $SSH_OPTIONS ".env.production" "$REMOTE_USER@$REMOTE_HOST:$REMOTE_DIR/.env.production"
    
    ssh $SSH_OPTIONS "$REMOTE_USER@$REMOTE_HOST" << 'EOF'
        cd /home/feustey/feustey
        
        # V√©rifier que le fichier .env.production existe
        if [ ! -f ".env.production" ]; then
            echo "‚ùå Fichier .env.production non trouv√©"
            exit 1
        fi
        
        # Copier vers .env pour docker-compose
        cp .env.production .env
        
        # Pull des images Docker
        echo "üì• R√©cup√©ration des images Docker..."
        echo "Feustey@AI!" | sudo -S docker-compose pull
        
        # D√©marrage des services
        echo "üåü D√©marrage des services..."
        echo "Feustey@AI!" | sudo -S docker-compose up -d
        
        # Attendre que les services d√©marrent
        echo "‚è≥ Attente du d√©marrage des services..."
        sleep 30
        
        # V√©rification des services
        echo "‚úÖ V√©rification du d√©ploiement..."
        echo "Feustey@AI!" | sudo -S docker-compose ps
        
        # Test de l'API
        echo "üîç Test de l'API..."
        for attempt in {1..5}; do
            if curl -f http://localhost:8000/health 2>/dev/null; then
                echo "‚úÖ API accessible"
                break
            else
                echo "‚è≥ Tentative $attempt/5 - API non accessible, attente..."
                sleep 10
            fi
        done
        
        # Affichage des logs r√©cents
        echo "üìù Logs r√©cents:"
        echo "Feustey@AI!" | sudo -S docker-compose logs --tail=20
EOF
}

# Test de l'API
test_api() {
    info "üîç Test de l'API..."
    
    # Test via le domaine
    if curl -f https://api.dazno.de/health 2>/dev/null; then
        success "‚úÖ API accessible via https://api.dazno.de"
    else
        warn "‚ö†Ô∏è  API non accessible via le domaine"
    fi
}

# Fonction principale
main() {
    echo "üöÄ Relance de Coolify sur Hostinger"
    echo "=================================="
    
    check_connectivity
    diagnose_services
    check_env_file
    
    read -p "Voulez-vous continuer avec la relance? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        info "‚ùå Relance annul√©e"
        exit 0
    fi
    
    force_stop_services
    restart_services
    test_api
    
    success "üéâ Relance termin√©e!"
    echo "üìà Dashboard Grafana: http://147.79.101.32:3000"
    echo "üìà Prometheus: http://147.79.101.32:9090"
    echo "üîç API: https://api.dazno.de"
}

# Ex√©cution du script
main "$@" 