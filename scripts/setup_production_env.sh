#!/bin/bash

# Script de configuration de l'environnement de production MCP
# Ce script g√©n√®re le fichier .env.production avec les variables n√©cessaires

# V√©rification que le script est ex√©cut√© depuis le bon r√©pertoire
if [ ! -f "docker-compose.prod.yml" ]; then
    echo "Erreur: Ce script doit √™tre ex√©cut√© depuis le r√©pertoire racine du projet"
    exit 1
fi

# Demande des valeurs n√©cessaires
read -p "Entrez votre cl√© API Sparkseer (sk_live_...) : " SPARKSEER_API_KEY
read -p "Entrez le mot de passe admin Grafana : " GRAFANA_ADMIN_PASSWORD
read -p "Entrez une cl√© secr√®te Grafana (32 caract√®res) : " GRAFANA_SECRET_KEY

# Validation des entr√©es
if [ -z "$SPARKSEER_API_KEY" ] || [ -z "$GRAFANA_ADMIN_PASSWORD" ] || [ -z "$GRAFANA_SECRET_KEY" ]; then
    echo "Erreur: Toutes les valeurs doivent √™tre renseign√©es"
    exit 1
fi

if [ ${#GRAFANA_SECRET_KEY} -ne 32 ]; then
    echo "Erreur: La cl√© secr√®te Grafana doit faire exactement 32 caract√®res"
    exit 1
fi

# Cr√©ation du fichier .env.production
cat > .env.production << EOL
# Configuration de l'environnement de production MCP

# API Sparkseer
SPARKSEER_API_KEY=${SPARKSEER_API_KEY}
SPARKSEER_BASE_URL=https://api.sparkseer.space

# Configuration Grafana
GRAFANA_ADMIN_USER=admin
GRAFANA_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
GRAFANA_SECRET_KEY=${GRAFANA_SECRET_KEY}

# Rate Limiting Sparkseer
RATE_LIMIT_SPARKSEER=200
DAILY_QUOTA_SPARKSEER=2000

# Origines autoris√©es
ALLOWED_ORIGINS=https://app.dazno.de

# Configuration des logs
LOG_LEVEL=INFO

# Configuration des workers
WORKERS=4
MAX_CONNECTIONS=100
EOL

# S√©curisation du fichier
chmod 600 .env.production

echo "Le fichier .env.production a √©t√© cr√©√© avec succ√®s"
echo "Assurez-vous de sauvegarder ces informations de mani√®re s√©curis√©e"

# Couleurs pour la sortie
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

echo "üîß Configuration de l'environnement de production MCP..."

# V√©rifier si le fichier .env.production existe d√©j√†
if [ -f .env.production ]; then
    echo -e "${RED}‚ö†Ô∏è  Le fichier .env.production existe d√©j√†${NC}"
    read -p "Voulez-vous le remplacer ? (o/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Oo]$ ]]; then
        echo "‚ùå Op√©ration annul√©e"
        exit 1
    fi
fi

# Copier le fichier de configuration s√©curis√©
echo "üìù Copie du fichier de configuration s√©curis√©..."
cp config/env.production.secure .env.production

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Erreur lors de la copie du fichier${NC}"
    exit 1
fi

# S√©curiser les permissions
echo "üîí S√©curisation des permissions..."
chmod 600 .env.production

# Configuration des variables manquantes
echo "‚öôÔ∏è Configuration des variables d'environnement..."

# Construire l'URL MongoDB
MONGO_URL="mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_INITDB_DATABASE}?authSource=admin"
echo "MONGO_URL=${MONGO_URL}" >> .env.production

# G√©n√©rer une cl√© secr√®te pour la s√©curit√© si elle n'existe pas
if ! grep -q "SECURITY_SECRET_KEY" .env.production; then
    SECURITY_KEY=$(openssl rand -base64 32)
    echo "SECURITY_SECRET_KEY=${SECURITY_KEY}" >> .env.production
fi

# Ajouter les variables LNBits
echo "LNBITS_ENDPOINT=https://legend.lnbits.com" >> .env.production
echo "LNBITS_INKEY=your_invoice_key" >> .env.production

# Ajouter la cl√© OpenAI
echo "AI_OPENAI_API_KEY=your_openai_key" >> .env.production

echo -e "${GREEN}‚úÖ Configuration termin√©e${NC}"
echo "‚ö†Ô∏è  N'oubliez pas de mettre √† jour les cl√©s API dans .env.production :"
echo "  - LNBITS_INKEY"
echo "  - AI_OPENAI_API_KEY"
echo "  - SPARKSEER_API_KEY (optionnel)"

# Red√©marrer les services
echo "üîÑ Red√©marrage des services..."
docker-compose -f docker-compose.prod.yml down
docker-compose -f docker-compose.prod.yml up -d

echo -e "\nüìã V√©rification des services :"
docker-compose -f docker-compose.prod.yml ps 