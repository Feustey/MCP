#!/bin/bash
# Script de d√©ploiement automatis√© pour Hostinger
# Derni√®re mise √† jour: 7 janvier 2025

set -e

echo "üöÄ D√©ploiement MCP sur Hostinger avec Docker Hub"

# Configuration
DOCKER_IMAGE="dazno/mcp"
DOCKER_TAG="latest"
COMPOSE_FILE="docker-compose.hostinger-local.yml"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction de logging
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rification des pr√©requis
log_info "V√©rification des pr√©requis..."

# V√©rifier Docker
if ! command -v docker &> /dev/null; then
    log_error "Docker n'est pas install√©"
    exit 1
fi

# V√©rifier Docker Compose
if ! command -v docker-compose &> /dev/null; then
    log_error "Docker Compose n'est pas install√©"
    exit 1
fi

log_info "‚úÖ Pr√©requis v√©rifi√©s"

# Cr√©ation des r√©pertoires n√©cessaires
log_info "Cr√©ation des r√©pertoires..."
mkdir -p logs data rag config/mongodb config/prometheus config/grafana/provisioning

# T√©l√©chargement de l'image depuis Docker Hub
log_info "T√©l√©chargement de l'image Docker..."
docker pull ${DOCKER_IMAGE}:${DOCKER_TAG}

# Arr√™t des conteneurs existants
log_info "Arr√™t des conteneurs existants..."
docker-compose -f ${COMPOSE_FILE} down --remove-orphans || true

# Nettoyage des volumes orphelins (optionnel)
log_warn "Nettoyage des volumes orphelins..."
docker volume prune -f || true

# D√©marrage des services
log_info "D√©marrage des services..."
docker-compose -f ${COMPOSE_FILE} up -d

# Attendre que les services soient pr√™ts
log_info "Attente du d√©marrage des services..."
sleep 30

# V√©rification de la sant√© des services
log_info "V√©rification de la sant√© des services..."

# MongoDB
if docker-compose -f ${COMPOSE_FILE} exec -T mongodb mongosh --eval "db.adminCommand('ping')" > /dev/null 2>&1; then
    log_info "‚úÖ MongoDB: Op√©rationnel"
else
    log_error "‚ùå MongoDB: Probl√®me de sant√©"
fi

# Redis
if docker-compose -f ${COMPOSE_FILE} exec -T redis redis-cli ping > /dev/null 2>&1; then
    log_info "‚úÖ Redis: Op√©rationnel"
else
    log_error "‚ùå Redis: Probl√®me de sant√©"
fi

# API MCP
if curl -f http://localhost:8000/health > /dev/null 2>&1; then
    log_info "‚úÖ API MCP: Op√©rationnel"
else
    log_error "‚ùå API MCP: Probl√®me de sant√©"
fi

# Caddy
if curl -f http://localhost:80 > /dev/null 2>&1; then
    log_info "‚úÖ Caddy: Op√©rationnel"
else
    log_error "‚ùå Caddy: Probl√®me de sant√©"
fi

# Affichage des informations de d√©ploiement
log_info "üéâ D√©ploiement termin√© avec succ√®s!"
echo ""
echo "üåê Informations de d√©ploiement:"
echo "   üåê API: http://api.dazno.de"
echo "   üìä Documentation: http://api.dazno.de/docs"
echo "   üîç Health Check: http://api.dazno.de/health"
echo "   üìà Grafana: http://localhost:3000 (admin/admin123)"
echo "   üìä Prometheus: http://localhost:9090"
echo ""
echo "üîß Commandes utiles:"
echo "   Voir les logs: docker-compose -f ${COMPOSE_FILE} logs -f"
echo "   Red√©marrer: docker-compose -f ${COMPOSE_FILE} restart"
echo "   Arr√™ter: docker-compose -f ${COMPOSE_FILE} down"
echo ""

# V√©rification finale
log_info "Test de connectivit√© finale..."
if curl -f http://api.dazno.de/health > /dev/null 2>&1; then
    log_info "‚úÖ D√©ploiement r√©ussi - API accessible"
else
    log_warn "‚ö†Ô∏è API non accessible imm√©diatement, v√©rifiez les logs"
fi 