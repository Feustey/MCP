#!/usr/bin/env python3
"""
Test simple du module DazFlow Index
V√©rification rapide des calculs et analyses

Derni√®re mise √† jour: 7 mai 2025
"""

import sys
import os
import asyncio

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.analytics import DazFlowCalculator, DazFlowAnalysis

def test_dazflow_calculations():
    """Test simple des calculs DazFlow Index"""
    print("üß™ Test simple DazFlow Index")
    print("=" * 40)
    
    # Initialiser le calculateur
    calculator = DazFlowCalculator()
    
    # Donn√©es de test
    test_node_data = {
        "node_id": "test_node_001",
        "channels": [
            {
                "channel_id": "test_channel_1",
                "peer_alias": "TestPeer1",
                "capacity": 1000000,
                "local_balance": 500000,
                "remote_balance": 500000,
                "active": True
            },
            {
                "channel_id": "test_channel_2",
                "peer_alias": "TestPeer2",
                "capacity": 2000000,
                "local_balance": 1800000,
                "remote_balance": 200000,
                "active": True
            }
        ],
        "historical_success_rate": 0.85,
        "metrics": {
            "centrality": {
                "betweenness": 0.6
            }
        }
    }
    
    try:
        # Test 1: Calcul de probabilit√© de succ√®s
        print("\n1Ô∏è‚É£ Test calcul probabilit√© de succ√®s...")
        amount = 100000
        probability = calculator.calculate_payment_success_probability(test_node_data, amount)
        print(f"   ‚úÖ Probabilit√© pour {amount:,} sats: {probability:.1%}")
        
        # Test 2: Courbe de fiabilit√©
        print("\n2Ô∏è‚É£ Test courbe de fiabilit√©...")
        amounts = [1000, 10000, 100000, 1000000]
        curve = calculator.generate_reliability_curve(test_node_data, amounts)
        print(f"   ‚úÖ Courbe g√©n√©r√©e avec {len(curve.amounts)} points")
        print(f"   ‚úÖ Montants recommand√©s: {len(curve.recommended_amounts)}")
        
        # Test 3: Identification des goulots
        print("\n3Ô∏è‚É£ Test identification goulots d'√©tranglement...")
        bottlenecks = calculator.identify_bottlenecks(test_node_data)
        print(f"   ‚úÖ {len(bottlenecks)} goulots identifi√©s")
        
        # Test 4: Analyse DazFlow Index compl√®te
        print("\n4Ô∏è‚É£ Test analyse DazFlow Index compl√®te...")
        analysis = calculator.analyze_dazflow_index(test_node_data)
        
        if analysis:
            print(f"   ‚úÖ Indice DazFlow: {analysis.dazflow_index:.4f}")
            print(f"   ‚úÖ Efficacit√© liquidit√©: {analysis.liquidity_efficiency:.4f}")
            print(f"   ‚úÖ Centralit√© r√©seau: {analysis.network_centrality:.4f}")
            print(f"   ‚úÖ Goulots d'√©tranglement: {len(analysis.bottleneck_channels)}")
            
            # Afficher les probabilit√©s de succ√®s
            print("\n   üìä Probabilit√©s de succ√®s:")
            for amount, prob in zip(analysis.payment_amounts, analysis.success_probabilities):
                print(f"      {amount:,} sats ‚Üí {prob:.1%}")
        else:
            print("   ‚ùå √âchec de l'analyse")
            return False
        
        print("\n‚úÖ Tous les tests DazFlow Index ont r√©ussi!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests: {e}")
        return False

def test_edge_cases():
    """Test des cas limites"""
    print("\nüîç Test des cas limites")
    print("-" * 30)
    
    calculator = DazFlowCalculator()
    
    # Test avec n≈ìud sans canaux
    print("\n1Ô∏è‚É£ Test n≈ìud sans canaux...")
    empty_node = {
        "node_id": "empty_node",
        "channels": [],
        "historical_success_rate": 0.85
    }
    
    probability = calculator.calculate_payment_success_probability(empty_node, 100000)
    print(f"   ‚úÖ Probabilit√© (n≈ìud vide): {probability:.1%}")
    
    # Test avec montant tr√®s √©lev√©
    print("\n2Ô∏è‚É£ Test montant tr√®s √©lev√©...")
    test_node = {
        "node_id": "test_node",
        "channels": [
            {
                "channel_id": "test_channel",
                "peer_alias": "TestPeer",
                "capacity": 1000000,
                "local_balance": 500000,
                "remote_balance": 500000,
                "active": True
            }
        ],
        "historical_success_rate": 0.85
    }
    
    large_amount = 10000000  # 10M sats
    probability = calculator.calculate_payment_success_probability(test_node, large_amount)
    print(f"   ‚úÖ Probabilit√© (10M sats): {probability:.1%}")
    
    print("\n‚úÖ Tests des cas limites r√©ussis!")

def main():
    """Fonction principale"""
    print("üöÄ Test simple du module DazFlow Index")
    print("=" * 50)
    
    # Test principal
    success = test_dazflow_calculations()
    
    if success:
        # Test des cas limites
        test_edge_cases()
        
        print("\nüéâ Tous les tests ont r√©ussi!")
        print("üìö Le module DazFlow Index est fonctionnel")
        print("üîß Pr√™t pour l'int√©gration en production")
    else:
        print("\n‚ùå Certains tests ont √©chou√©")
        print("üîß V√©rifiez la configuration et les d√©pendances")
        sys.exit(1)

if __name__ == "__main__":
    main() 