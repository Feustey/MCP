#!/usr/bin/env python3
"""
Script de d√©monstration pour l'API DazFlow Index
Illustre les fonctionnalit√©s d'analyse avanc√©e du Lightning Network

Derni√®re mise √† jour: 7 mai 2025
"""

import asyncio
import json
import sys
import os
from typing import Dict, Any

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.analytics import DazFlowCalculator, DazFlowAnalysis
from app.services.lnbits import LNBitsService

class DazFlowDemo:
    """Classe de d√©monstration pour les fonctionnalit√©s DazFlow Index"""
    
    def __init__(self):
        """Initialise la d√©monstration"""
        self.calculator = DazFlowCalculator()
        self.lnbits_service = LNBitsService()
        
        # Donn√©es de d√©monstration
        self.demo_node_data = {
            "node_id": "demo_node_001",
            "channels": [
                {
                    "channel_id": "demo_channel_1",
                    "peer_alias": "ACINQ",
                    "capacity": 5000000,
                    "local_balance": 2500000,
                    "remote_balance": 2500000,
                    "active": True
                },
                {
                    "channel_id": "demo_channel_2",
                    "peer_alias": "Blockstream",
                    "capacity": 3000000,
                    "local_balance": 2700000,
                    "remote_balance": 300000,
                    "active": True
                },
                {
                    "channel_id": "demo_channel_3",
                    "peer_alias": "Lightning Labs",
                    "capacity": 2000000,
                    "local_balance": 400000,
                    "remote_balance": 1600000,
                    "active": True
                }
            ],
            "historical_success_rate": 0.88,
            "metrics": {
                "centrality": {
                    "betweenness": 0.65
                }
            }
        }
    
    async def run_demo(self):
        """Ex√©cute la d√©monstration compl√®te"""
        print("üöÄ D√©monstration DazFlow Index - Analyse Lightning Network")
        print("=" * 60)
        
        try:
            # 1. Analyse DazFlow Index compl√®te
            await self.demo_dazflow_analysis()
            
            # 2. Courbe de fiabilit√©
            await self.demo_reliability_curve()
            
            # 3. Identification des goulots d'√©tranglement
            await self.demo_bottlenecks()
            
            # 4. Optimisation de liquidit√©
            await self.demo_liquidity_optimization()
            
            # 5. Comparaison avec donn√©es r√©elles (si disponibles)
            await self.demo_real_data_comparison()
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la d√©monstration: {e}")
            return False
        
        print("\n‚úÖ D√©monstration termin√©e avec succ√®s!")
        return True
    
    async def demo_dazflow_analysis(self):
        """D√©monstration de l'analyse DazFlow Index"""
        print("\nüìä 1. Analyse DazFlow Index")
        print("-" * 30)
        
        analysis = self.calculator.analyze_dazflow_index(self.demo_node_data)
        
        if analysis:
            print(f"üîç N≈ìud analys√©: {analysis.node_id}")
            print(f"üìà Indice DazFlow: {analysis.dazflow_index:.4f}")
            print(f"üíß Efficacit√© liquidit√©: {analysis.liquidity_efficiency:.4f}")
            print(f"üåê Centralit√© r√©seau: {analysis.network_centrality:.4f}")
            print(f"‚ö†Ô∏è  Goulots d'√©tranglement: {len(analysis.bottleneck_channels)}")
            
            # Analyse des probabilit√©s de succ√®s
            print("\nüí∞ Probabilit√©s de succ√®s par montant:")
            for amount, prob in zip(analysis.payment_amounts, analysis.success_probabilities):
                print(f"   {amount:,} sats ‚Üí {prob:.1%}")
        else:
            print("‚ùå Impossible d'analyser le n≈ìud")
    
    async def demo_reliability_curve(self):
        """D√©monstration de la courbe de fiabilit√©"""
        print("\nüìà 2. Courbe de fiabilit√© des paiements")
        print("-" * 40)
        
        amounts = [1000, 10000, 100000, 1000000, 10000000]
        curve = self.calculator.generate_reliability_curve(self.demo_node_data, amounts)
        
        print(f"üìä Montants test√©s: {len(curve.amounts)}")
        print(f"üéØ Montants recommand√©s: {len(curve.recommended_amounts)}")
        
        if curve.recommended_amounts:
            max_reliable = max(curve.recommended_amounts)
            print(f"üí™ Montant maximum fiable: {max_reliable:,} sats")
        
        # Afficher la courbe
        print("\nüìâ D√©tail de la courbe:")
        for i, (amount, prob) in enumerate(zip(curve.amounts, curve.probabilities)):
            confidence = curve.confidence_intervals[i]
            status = "‚úÖ" if amount in curve.recommended_amounts else "‚ö†Ô∏è"
            print(f"   {status} {amount:,} sats ‚Üí {prob:.1%} [{confidence[0]:.1%}-{confidence[1]:.1%}]")
    
    async def demo_bottlenecks(self):
        """D√©monstration de l'identification des goulots d'√©tranglement"""
        print("\nüîç 3. Identification des goulots d'√©tranglement")
        print("-" * 45)
        
        bottlenecks = self.calculator.identify_bottlenecks(self.demo_node_data)
        
        if bottlenecks:
            print(f"‚ö†Ô∏è  {len(bottlenecks)} goulots d'√©tranglement identifi√©s")
            
            high_severity = [b for b in bottlenecks if b["severity"] == "high"]
            medium_severity = [b for b in bottlenecks if b["severity"] == "medium"]
            
            print(f"üî¥ S√©v√©rit√© haute: {len(high_severity)}")
            print(f"üü° S√©v√©rit√© moyenne: {len(medium_severity)}")
            
            # Afficher les d√©tails
            for bottleneck in bottlenecks[:3]:  # Limiter √† 3 pour la lisibilit√©
                print(f"\nüìã Canal: {bottleneck['peer_alias']}")
                print(f"   D√©s√©quilibre: {bottleneck['imbalance_ratio']:.1%}")
                print(f"   Probl√®mes: {', '.join(bottleneck['issues'])}")
                print(f"   S√©v√©rit√©: {bottleneck['severity']}")
        else:
            print("‚úÖ Aucun goulot d'√©tranglement d√©tect√©")
    
    async def demo_liquidity_optimization(self):
        """D√©monstration de l'optimisation de liquidit√©"""
        print("\n‚ö° 4. Optimisation de liquidit√©")
        print("-" * 30)
        
        target_amount = 500000  # 500k sats
        current_analysis = self.calculator.analyze_dazflow_index(self.demo_node_data)
        
        if current_analysis:
            print(f"üéØ Montant cible: {target_amount:,} sats")
            print(f"üìä Indice DazFlow actuel: {current_analysis.dazflow_index:.4f}")
            print(f"üíß Efficacit√© actuelle: {current_analysis.liquidity_efficiency:.4f}")
            
            # Simuler des recommandations
            recommendations = self._generate_demo_recommendations()
            
            print(f"\nüí° {len(recommendations)} recommandations g√©n√©r√©es:")
            for i, rec in enumerate(recommendations, 1):
                print(f"   {i}. {rec['action']} sur {rec['peer_alias']}")
                print(f"      Montant: {rec['amount']:,} sats")
                print(f"      Priorit√©: {rec['priority']}")
                print(f"      Raison: {rec['reason']}")
    
    async def demo_real_data_comparison(self):
        """D√©monstration avec comparaison de donn√©es r√©elles"""
        print("\nüåê 5. Comparaison avec donn√©es r√©elles")
        print("-" * 40)
        
        try:
            # Essayer de r√©cup√©rer des donn√©es r√©elles
            real_nodes = await self.lnbits_service.get_network_data()
            
            if real_nodes and len(real_nodes) > 0:
                print(f"üìä {len(real_nodes)} n≈ìuds r√©els disponibles")
                
                # Analyser le premier n≈ìud r√©el
                real_node = real_nodes[0]
                real_analysis = self.calculator.analyze_dazflow_index(real_node)
                
                if real_analysis:
                    print(f"üîç N≈ìud r√©el: {real_analysis.node_id}")
                    print(f"üìà Indice DazFlow r√©el: {real_analysis.dazflow_index:.4f}")
                    print(f"üíß Efficacit√© r√©elle: {real_analysis.liquidity_efficiency:.4f}")
                    
                    # Comparer avec les donn√©es de d√©mo
                    demo_analysis = self.calculator.analyze_dazflow_index(self.demo_node_data)
                    if demo_analysis:
                        print(f"\nüìä Comparaison:")
                        print(f"   D√©mo vs R√©el - DazFlow: {demo_analysis.dazflow_index:.4f} vs {real_analysis.dazflow_index:.4f}")
                        print(f"   D√©mo vs R√©el - Efficacit√©: {demo_analysis.liquidity_efficiency:.4f} vs {real_analysis.liquidity_efficiency:.4f}")
            else:
                print("‚ÑπÔ∏è  Aucune donn√©e r√©elle disponible pour la comparaison")
                
        except Exception as e:
            print(f"‚ÑπÔ∏è  Impossible de r√©cup√©rer les donn√©es r√©elles: {e}")
    
    def _generate_demo_recommendations(self) -> list:
        """G√©n√®re des recommandations de d√©monstration"""
        return [
            {
                "channel_id": "demo_channel_2",
                "peer_alias": "Blockstream",
                "action": "R√©duire liquidit√©",
                "amount": 1200000,
                "priority": "high",
                "reason": "D√©s√©quilibre de 80%"
            },
            {
                "channel_id": "demo_channel_3", 
                "peer_alias": "Lightning Labs",
                "action": "Augmenter liquidit√©",
                "amount": 600000,
                "priority": "medium",
                "reason": "D√©s√©quilibre de 60%"
            }
        ]
    
    def print_summary(self):
        """Affiche un r√©sum√© des fonctionnalit√©s"""
        print("\nüìã R√©sum√© des fonctionnalit√©s DazFlow Index")
        print("=" * 50)
        print("‚úÖ Analyse compl√®te de la sant√© des n≈ìuds")
        print("‚úÖ Courbe de fiabilit√© des paiements")
        print("‚úÖ Identification des goulots d'√©tranglement")
        print("‚úÖ Optimisation de liquidit√©")
        print("‚úÖ M√©triques de centralit√© r√©seau")
        print("‚úÖ Recommandations d'am√©lioration")
        print("‚úÖ Compatible avec LNBits et Amboss")

async def main():
    """Fonction principale"""
    demo = DazFlowDemo()
    
    # Afficher le r√©sum√©
    demo.print_summary()
    
    # Ex√©cuter la d√©monstration
    success = await demo.run_demo()
    
    if success:
        print("\nüéâ DazFlow Index est pr√™t pour la production!")
        print("üìö Consultez la documentation pour plus de d√©tails")
    else:
        print("\n‚ùå La d√©monstration a √©chou√©")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 