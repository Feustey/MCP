#!/bin/bash
# scripts/coolify_redeploy.sh - Red√©ploiement rapide via Coolify
# Derni√®re mise √† jour: 7 janvier 2025

set -e

echo "üöÄ === RED√âPLOIEMENT RAPIDE COOLIFY ==="
echo "====================================="

# Variables
COOLIFY_URL="https://coolify.marshmaflow.app"
DOMAIN="api.dazno.de"

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# 1. Nettoyage rapide
log "üßπ Nettoyage rapide des conteneurs locaux..."
docker system prune -f || true

# 2. Reconstruction de l'image
log "üî® Reconstruction de l'image Docker..."
if docker build -f Dockerfile.coolify -t mcp-api:latest .; then
    log "‚úÖ Image construite avec succ√®s"
else
    log "‚ùå √âchec de construction - v√©rifiez les logs"
    exit 1
fi

# 3. Test rapide de l'image
log "üß™ Test rapide de l'image..."
if docker run --rm --name test-mcp mcp-api:latest python -c "import sys; print('‚úÖ Python OK'); sys.exit(0)" 2>/dev/null; then
    log "‚úÖ Image test√©e avec succ√®s"
else
    log "‚ö†Ô∏è Test de l'image √©chou√© - mais on continue"
fi

# 4. V√©rification des fichiers de configuration
log "üìã V√©rification des configurations..."
if [ -f "docker-compose.coolify.yml" ]; then
    log "‚úÖ docker-compose.coolify.yml pr√©sent"
else
    log "‚ùå docker-compose.coolify.yml manquant"
fi

if [ -f "Dockerfile.coolify" ]; then
    log "‚úÖ Dockerfile.coolify pr√©sent"
else
    log "‚ùå Dockerfile.coolify manquant"
fi

# 5. Test de connectivit√© Coolify
log "üîç Test de connectivit√© Coolify..."
if curl -s --connect-timeout 10 "$COOLIFY_URL" > /dev/null 2>&1; then
    log "‚úÖ Coolify accessible"
    
    # Ouvrir Coolify dans le navigateur
    log "üåê Ouverture de Coolify dans le navigateur..."
    open "$COOLIFY_URL" 2>/dev/null || true
    
else
    log "‚ùå Coolify non accessible"
    exit 1
fi

# 6. Instructions de red√©ploiement
log "üìã === INSTRUCTIONS DE RED√âPLOIEMENT ==="
echo ""
echo "Coolify est accessible ! Suivez ces √©tapes :"
echo ""
echo "1. üåê Acc√©dez √† : $COOLIFY_URL"
echo "2. üîë Connectez-vous √† votre compte"
echo "3. üìÇ Allez dans votre projet MCP"
echo "4. üîÑ Cliquez sur 'Force Redeploy' ou 'Restart'"
echo "5. üìä Surveillez les logs de d√©ploiement"
echo "6. ‚öôÔ∏è  V√©rifiez les variables d'environnement :"
echo "   - ENVIRONMENT=production"
echo "   - LOG_LEVEL=INFO"
echo "   - DRY_RUN=true"
echo "   - PORT=8000"
echo "   - MONGO_URL=mongodb://mongodb:27017/mcp"
echo "   - REDIS_HOST=redis"
echo "   - REDIS_PORT=6379"
echo "   - AI_OPENAI_API_KEY=votre_cl√©"
echo "   - SECURITY_SECRET_KEY=votre_cl√©"
echo ""
echo "7. üîç Apr√®s le d√©ploiement, testez :"
echo "   - https://api.dazno.de/health"
echo "   - https://api.dazno.de/docs"
echo ""

# 7. Attendre et tester
log "‚è≥ Attente de 30 secondes pour permettre le red√©ploiement..."
sleep 30

# 8. Test final
log "üîç Test des endpoints..."
endpoints=(
    "https://api.dazno.de/health"
    "https://api.dazno.de/docs"
)

for endpoint in "${endpoints[@]}"; do
    log "Test $endpoint..."
    if curl -s --connect-timeout 10 "$endpoint" > /dev/null 2>&1; then
        log "‚úÖ $endpoint accessible"
    else
        log "‚ùå $endpoint non accessible"
    fi
done

log "‚úÖ === SCRIPT TERMIN√â ==="
echo ""
echo "üéØ STATUT FINAL :"
echo "- Image Docker : ‚úÖ Construite"
echo "- Coolify : ‚úÖ Accessible"
echo "- Action requise : Red√©ploiement manuel via Coolify"
echo ""
echo "Si les endpoints ne r√©pondent toujours pas :"
echo "1. V√©rifiez les logs dans Coolify"
echo "2. Red√©marrez le service dans Coolify"
echo "3. Contactez le support si n√©cessaire" 