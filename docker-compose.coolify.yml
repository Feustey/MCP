# Configuration Coolify pour MCP - Optimisée pour déploiement automatique
# Dernière mise à jour: 7 janvier 2025

version: '3.8'

services:
  mcp-api:
    build:
      context: .
      dockerfile: Dockerfile.coolify
    container_name: mcp-coolify-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Configuration de base
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - DRY_RUN=true
      - PORT=8000
      - WORKERS=2
      
      # Base de données (utilise les services existants sur Hostinger)
      - MONGO_URI=mongodb://147.79.101.32:27017/mcp
      - REDIS_URL=redis://147.79.101.32:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      
      # Sécurité et API Keys
      - SECURITY_SECRET_KEY=${SECURITY_SECRET_KEY}
      - SECURITY_CORS_ORIGINS=https://api.dazno.de
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AI_OPENAI_API_KEY=${AI_OPENAI_API_KEY}
      
      # Configuration LNBits
      - LNBITS_URL=${LNBITS_URL}
      - LNBITS_ADMIN_KEY=${LNBITS_ADMIN_KEY}
      - LNBITS_INVOICE_KEY=${LNBITS_INVOICE_KEY}
      
      # Configuration Amboss
      - AMBOSS_API_KEY=${AMBOSS_API_KEY}
      
      # Configuration Telegram (optionnel)
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
    
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./rag:/app/rag
      - ./config:/app/config
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    networks:
      - mcp-network

  # Nginx pour le reverse proxy (optionnel si Coolify gère déjà)
  nginx:
    image: nginx:alpine
    container_name: mcp-coolify-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/api.dazno.de.conf:/etc/nginx/conf.d/default.conf:ro
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - mcp-api
    networks:
      - mcp-network

networks:
  mcp-network:
    driver: bridge 