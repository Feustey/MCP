version: '3.8'

services:
  # Service principal MCP en production
  mcp-api:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: mcp-api-prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data:ro
      - ./logs:/app/logs
      - ./rag:/app/rag:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env.production
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - MONGODB_URL=mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongodb:27017/mcp_prod?authSource=admin
      - ALLOWED_ORIGINS=https://app.dazno.de
      - LOG_LEVEL=INFO
      - WORKERS=4
      - MAX_CONNECTIONS=100
      # Sparkseer API
      - SPARKSEER_API_KEY=${SPARKSEER_API_KEY}
      - SPARKSEER_BASE_URL=${SPARKSEER_BASE_URL:-https://api.sparkseer.space}
      
      # Rate limiting spécifique Sparkseer
      - RATE_LIMIT_SPARKSEER=${RATE_LIMIT_SPARKSEER:-200}
      - DAILY_QUOTA_SPARKSEER=${DAILY_QUOTA_SPARKSEER:-2000}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mcp-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"

  # Base de données MongoDB sécurisée
  mongodb:
    image: mongo:6.0
    container_name: mcp-mongodb-prod
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_prod_data:/data/db
      - ./backups:/backups
      - ./config/mongodb/mongod.conf:/etc/mongod.conf:ro
      - ./config/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=mcp_prod
    command: ["mongod", "--config", "/etc/mongod.conf", "--auth"]
    healthcheck:
      test: |
        echo 'db.runCommand("ping").ok' | mongosh mongodb://localhost:27017/mcp_prod \
        --username ${MONGO_ROOT_USER} --password ${MONGO_ROOT_PASSWORD} --authenticationDatabase admin --quiet
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - mcp-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # Cache Redis sécurisé
  redis:
    image: redis:7.0-alpine
    container_name: mcp-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
      - ./config/redis/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - mcp-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    security_opt:
      - no-new-privileges:true

  # Monitoring Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_prod_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-admin-api'
      - '--web.enable-lifecycle'
      - '--log.level=info'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - mcp-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.3'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # Dashboard Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_prod_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      - GF_SERVER_ROOT_URL=https://api.dazno.de/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_LOG_LEVEL=warn
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - mcp-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    security_opt:
      - no-new-privileges:true

  # Base vectorielle Qdrant pour RAG
  qdrant:
    image: qdrant/qdrant:latest
    container_name: mcp-qdrant-prod
    restart: unless-stopped
    ports:
      - "6333:6333"
    volumes:
      - qdrant_prod_data:/qdrant/storage
      - ./config/qdrant/config.yaml:/qdrant/config/production.yaml:ro
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__CLUSTER__ENABLED=false
      - QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_THREADS=4
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6333/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - mcp-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # Service de sauvegarde automatique
  backup:
    build:
      context: ./config/backup
      dockerfile: Dockerfile
    container_name: mcp-backup-prod
    restart: unless-stopped
    volumes:
      - ./backups:/backups
      - mongodb_prod_data:/mongodb-data:ro
      - redis_prod_data:/redis-data:ro
      - grafana_prod_data:/grafana-data:ro
      - qdrant_prod_data:/qdrant-data:ro
      - ./logs:/app-logs:ro
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Tous les jours à 2h du matin
      - RETENTION_DAYS=30
      - MONGO_ROOT_USER=${MONGO_ROOT_USER}
      - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
    depends_on:
      - mongodb
      - redis
    networks:
      - mcp-network
    security_opt:
      - no-new-privileges:true

  # Service de monitoring système
  node-exporter:
    image: prom/node-exporter:latest
    container_name: mcp-node-exporter-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - mcp-network
    security_opt:
      - no-new-privileges:true

  # Service d'alerte automatique
  alertmanager:
    image: prom/alertmanager:latest
    container_name: mcp-alertmanager-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:9093:9093"
    volumes:
      - ./config/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_prod_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.listen-address=""'
    networks:
      - mcp-network
    security_opt:
      - no-new-privileges:true

volumes:
  mongodb_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/mcp/data/mongodb
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/mcp/data/redis
  prometheus_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/mcp/data/prometheus
  grafana_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/mcp/data/grafana
  qdrant_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/mcp/data/qdrant
  alertmanager_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/mcp/data/alertmanager

networks:
  mcp-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-mcp-prod
    ipam:
      config:
        - subnet: 172.20.0.0/16 