services:
  # Service principal MCP en production
  mcp-api:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: mcp-api-prod
    restart: unless-stopped
    expose:
      - "8000"
    volumes:
      - ./data:/app/data:ro
      - ./logs:/app/logs
      - ./rag:/app/rag:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env.production
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DRY_RUN=false
      - MONGO_URL=mongodb://mongodb:27017
      - MONGO_NAME=mcp_prod
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_SSL=true
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - LOG_ENABLE_STRUCTLOG=true
      - LOG_ENABLE_FILE_LOGGING=true
      - LOG_LOG_FILE_PATH=logs/mcp.log
      - LOG_MAX_FILE_SIZE=10485760
      - LOG_BACKUP_COUNT=5
      - LOG_ENABLE_TRACING=true
      - ALLOWED_ORIGINS=https://app.dazno.de
      - WORKERS=4
      - MAX_CONNECTIONS=100
      # Sparkseer API
      - SPARKSEER_API_KEY=${SPARKSEER_API_KEY}
      - SPARKSEER_BASE_URL=${SPARKSEER_BASE_URL:-https://api.sparkseer.space}
      
      # Rate limiting sp√©cifique Sparkseer
      - RATE_LIMIT_SPARKSEER=${RATE_LIMIT_SPARKSEER:-200}
      - DAILY_QUOTA_SPARKSEER=${DAILY_QUOTA_SPARKSEER:-2000}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mcp-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: mcp-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/api.dazno.de.conf:/etc/nginx/conf.d/default.conf:ro
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot:ro
    depends_on:
      - mcp-api
      - grafana
      - prometheus
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mcp-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 128M
    security_opt:
      - no-new-privileges:true

  # Monitoring Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_prod_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-admin-api'
      - '--web.enable-lifecycle'
      - '--log.level=info'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - mcp-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.3'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # Dashboard Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_prod_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      - GF_SERVER_ROOT_URL=https://api.dazno.de/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_LOG_LEVEL=warn
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - mcp-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.3'
          memory: 512M
    security_opt:
      - no-new-privileges:true

volumes:
  prometheus_prod_data:
  grafana_prod_data:
  alertmanager_prod_data:

networks:
  mcp-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-mcp-prod
    ipam:
      config:
        - subnet: 172.20.0.0/16 