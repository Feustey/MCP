#!/bin/bash
# Script de mise à jour MCP RAG sur Hostinger via git pull
# Dernière mise à jour: 7 janvier 2025

set -e

# Configuration
SSH_HOST="u123456789@your-hostinger-server.com"  # À remplacer par vos vraies credentials
SSH_PORT="22"
PROJECT_DIR="~/mcp-rag"
BRANCH="berty"

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1"
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1"
    exit 1
}

# Vérification des prérequis
check_prerequisites() {
    log "Vérification des prérequis..."
    
    # Vérifier SSH
    if ! command -v ssh &> /dev/null; then
        error "SSH n'est pas installé"
    fi
    
    # Tester la connexion SSH
    if ! ssh -p $SSH_PORT -o ConnectTimeout=10 $SSH_HOST "echo 'Connexion SSH OK'" &> /dev/null; then
        error "Impossible de se connecter au serveur Hostinger"
    fi
    
    log "Prérequis vérifiés avec succès"
}

# Sauvegarde avant mise à jour
backup_before_update() {
    log "Sauvegarde avant mise à jour..."
    
    ssh -p $SSH_PORT $SSH_HOST << EOF
        cd $PROJECT_DIR
        
        # Créer une sauvegarde avec timestamp
        BACKUP_NAME="backup-before-update-\$(date +%Y%m%d_%H%M%S)"
        
        # Sauvegarder les fichiers importants
        tar -czf "\$BACKUP_NAME.tar.gz" \
            data/ \
            rag/ \
            logs/ \
            config/ \
            .env* \
            2>/dev/null || true
            
        echo "Sauvegarde créée: \$BACKUP_NAME.tar.gz"
EOF
    
    log "Sauvegarde terminée"
}

# Vérification de l'état git
check_git_status() {
    log "Vérification de l'état git..."
    
    ssh -p $SSH_PORT $SSH_HOST << EOF
        cd $PROJECT_DIR
        
        echo "=== État du repository ==="
        git status --porcelain
        
        echo ""
        echo "=== Branche actuelle ==="
        git branch --show-current
        
        echo ""
        echo "=== Derniers commits ==="
        git log --oneline -5
        
        echo ""
        echo "=== Différences avec origin ==="
        git fetch origin
        git log --oneline HEAD..origin/$BRANCH
EOF
}

# Mise à jour via git pull
update_via_git_pull() {
    log "Mise à jour via git pull..."
    
    ssh -p $SSH_PORT $SSH_HOST << EOF
        cd $PROJECT_DIR
        
        # Sauvegarder les modifications locales si elles existent
        if [ -n "\$(git status --porcelain)" ]; then
            echo "Modifications locales détectées, création d'un stash..."
            git stash push -m "Auto-stash before pull \$(date)"
        fi
        
        # Fetch des dernières modifications
        echo "Fetch des dernières modifications..."
        git fetch origin
        
        # Vérifier s'il y a des modifications
        if [ "\$(git rev-list HEAD..origin/$BRANCH --count)" -eq "0" ]; then
            echo "Aucune nouvelle modification disponible"
            exit 0
        fi
        
        # Pull des modifications
        echo "Pull des modifications depuis origin/$BRANCH..."
        git pull origin $BRANCH
        
        # Restaurer les modifications locales si nécessaire
        if git stash list | grep -q "Auto-stash before pull"; then
            echo "Restauration des modifications locales..."
            git stash pop
        fi
        
        echo "Mise à jour git terminée"
EOF
    
    log "Mise à jour git terminée"
}

# Mise à jour des dépendances
update_dependencies() {
    log "Mise à jour des dépendances..."
    
    ssh -p $SSH_PORT $SSH_HOST << EOF
        cd $PROJECT_DIR
        
        # Vérifier si requirements.txt a changé
        if git diff --name-only HEAD~1 HEAD | grep -q "requirements"; then
            echo "Requirements modifiés, mise à jour des dépendances..."
            
            # Installer les nouvelles dépendances
            pip install -r requirements-hostinger.txt --upgrade || true
        else
            echo "Aucune modification des requirements détectée"
        fi
EOF
    
    log "Dépendances mises à jour"
}

# Redémarrage des services
restart_services() {
    log "Redémarrage des services..."
    
    ssh -p $SSH_PORT $SSH_HOST << EOF
        cd $PROJECT_DIR
        
        # Arrêt des services
        echo "Arrêt des services..."
        docker-compose -f docker-compose.hostinger.yml down
        
        # Pull de la dernière image si nécessaire
        echo "Pull de la dernière image Docker..."
        docker pull feustey/dazno:latest
        
        # Redémarrage des services
        echo "Redémarrage des services..."
        docker-compose -f docker-compose.hostinger.yml up -d
        
        # Attente du démarrage
        echo "Attente du démarrage des services..."
        sleep 30
        
        # Vérification de la santé
        echo "Vérification de la santé des services..."
        docker-compose -f docker-compose.hostinger.yml ps
EOF
    
    log "Services redémarrés"
}

# Vérification post-mise à jour
post_update_check() {
    log "Vérification post-mise à jour..."
    
    # Test de l'API
    log "Test de l'API..."
    if curl -f -s https://api.dazno.de/api/v1/health > /dev/null; then
        log "✅ API accessible"
    else
        warn "⚠️ API non accessible"
    fi
    
    # Test des endpoints RAG
    log "Test des endpoints RAG..."
    if curl -f -s https://api.dazno.de/api/v1/rag/health > /dev/null; then
        log "✅ Endpoints RAG accessibles"
    else
        warn "⚠️ Endpoints RAG non accessibles"
    fi
    
    # Test des endpoints Intelligence
    log "Test des endpoints Intelligence..."
    if curl -f -s https://api.dazno.de/api/v1/intelligence/health/intelligence > /dev/null; then
        log "✅ Endpoints Intelligence accessibles"
    else
        warn "⚠️ Endpoints Intelligence non accessibles"
    fi
    
    log "Vérification post-mise à jour terminée"
}

# Affichage des informations de mise à jour
show_update_info() {
    log "Informations de mise à jour:"
    echo ""
    echo "🔄 Mise à jour terminée"
    echo "🌐 API: https://api.dazno.de"
    echo "📊 Documentation: https://api.dazno.de/docs"
    echo ""
    echo "📋 Logs: ssh $SSH_HOST 'cd $PROJECT_DIR && docker-compose -f docker-compose.hostinger.yml logs -f'"
    echo "🔄 Redémarrage manuel: ssh $SSH_HOST 'cd $PROJECT_DIR && docker-compose -f docker-compose.hostinger.yml restart'"
    echo "🛑 Arrêt: ssh $SSH_HOST 'cd $PROJECT_DIR && docker-compose -f docker-compose.hostinger.yml down'"
    echo ""
}

# Fonction principale
main() {
    log "🔄 Démarrage de la mise à jour MCP RAG sur Hostinger"
    log "Serveur: $SSH_HOST"
    log "Branche: $BRANCH"
    echo ""
    
    check_prerequisites
    backup_before_update
    check_git_status
    update_via_git_pull
    update_dependencies
    restart_services
    post_update_check
    show_update_info
    
    log "✅ Mise à jour terminée avec succès!"
}

# Gestion des erreurs
trap 'error "Erreur lors de la mise à jour"' ERR

# Exécution
main "$@" 