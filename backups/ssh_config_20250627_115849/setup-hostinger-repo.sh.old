#!/bin/bash
# Script de setup du repository git sur Hostinger
# Derni√®re mise √† jour: 7 janvier 2025

set -e

# Configuration
SSH_HOST="feustey@srv782904.hostinger.com"
SSH_PORT="22"
PROJECT_DIR="~/mcp-rag"
REPO_URL="https://github.com/Feustey/MCP.git"
BRANCH="berty"

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1"
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1"
    exit 1
}

# V√©rification des pr√©requis
check_prerequisites() {
    log "V√©rification des pr√©requis..."
    
    # V√©rifier SSH
    if ! command -v ssh &> /dev/null; then
        error "SSH n'est pas install√©"
    fi
    
    # Tester la connexion SSH
    if ! ssh -p $SSH_PORT -o ConnectTimeout=10 $SSH_HOST "echo 'Connexion SSH OK'" &> /dev/null; then
        error "Impossible de se connecter au serveur Hostinger"
    fi
    
    log "Pr√©requis v√©rifi√©s avec succ√®s"
}

# V√©rification de l'existence du repository
check_repository_exists() {
    log "V√©rification de l'existence du repository..."
    
    if ssh -p $SSH_PORT $SSH_HOST "[ -d $PROJECT_DIR/.git ]"; then
        log "Repository git existe d√©j√†"
        return 0
    else
        log "Repository git n'existe pas"
        return 1
    fi
}

# Clonage du repository
clone_repository() {
    log "Clonage du repository..."
    
    ssh -p $SSH_PORT $SSH_HOST << EOF
        # Supprimer le r√©pertoire s'il existe
        if [ -d $PROJECT_DIR ]; then
            echo "Suppression du r√©pertoire existant..."
            rm -rf $PROJECT_DIR
        fi
        
        # Cloner le repository
        echo "Clonage du repository depuis GitHub..."
        git clone $REPO_URL $PROJECT_DIR
        
        # Aller dans le r√©pertoire
        cd $PROJECT_DIR
        
        # Basculer sur la branche berty
        echo "Basculement sur la branche $BRANCH..."
        git checkout $BRANCH
        
        # V√©rifier l'√©tat
        echo "=== √âtat du repository ==="
        git status
        
        echo ""
        echo "=== Branche actuelle ==="
        git branch --show-current
        
        echo ""
        echo "=== Derniers commits ==="
        git log --oneline -5
EOF
    
    log "Repository clon√© avec succ√®s"
}

# Configuration git
setup_git_config() {
    log "Configuration git..."
    
    ssh -p $SSH_PORT $SSH_HOST << EOF
        cd $PROJECT_DIR
        
        # Configuration git de base
        git config user.name "MCP Deploy"
        git config user.email "deploy@dazno.de"
        
        # Configuration pour √©viter les probl√®mes de merge
        git config pull.rebase false
        
        # R√©soudre le probl√®me de propri√©t√© Git
        echo "R√©solution du probl√®me de propri√©t√© Git..."
        git config --global --add safe.directory $PROJECT_DIR
        
        # V√©rifier que le probl√®me est r√©solu
        if git status > /dev/null 2>&1; then
            echo "‚úÖ Probl√®me de propri√©t√© Git r√©solu"
        else
            echo "‚ùå Probl√®me de propri√©t√© Git persistant"
            # Essayer de changer la propri√©t√©
            sudo chown -R feustey:feustey $PROJECT_DIR 2>/dev/null || true
        fi
        
        echo "Configuration git termin√©e"
EOF
    
    log "Configuration git termin√©e"
}

# Cr√©ation des r√©pertoires n√©cessaires
create_directories() {
    log "Cr√©ation des r√©pertoires n√©cessaires..."
    
    ssh -p $SSH_PORT $SSH_HOST << EOF
        cd $PROJECT_DIR
        
        # Cr√©er les r√©pertoires n√©cessaires
        mkdir -p logs/{nginx,api}
        mkdir -p data/{metrics,reports,actions}
        mkdir -p rag/{RAG_assets,generators,integrations}
        mkdir -p backups
        mkdir -p config/{nginx,prometheus,grafana,qdrant}
        mkdir -p config/grafana/{dashboards,provisioning/{datasources,dashboards}}
        mkdir -p config/prometheus/rules
        
        # Permissions
        chmod -R 755 logs data rag backups config
        
        echo "R√©pertoires cr√©√©s"
EOF
    
    log "R√©pertoires cr√©√©s"
}

# Test du repository
test_repository() {
    log "Test du repository..."
    
    ssh -p $SSH_PORT $SSH_HOST << EOF
        cd $PROJECT_DIR
        
        echo "=== Test des commandes git ==="
        git status
        git log --oneline -3
        
        echo ""
        echo "=== Test des fichiers ==="
        ls -la
        echo ""
        echo "=== Test des endpoints ==="
        if [ -f "src/api/rag_endpoints.py" ]; then
            echo "‚úÖ Endpoints RAG trouv√©s"
        else
            echo "‚ùå Endpoints RAG manquants"
        fi
        
        if [ -f "src/api/intelligence_endpoints.py" ]; then
            echo "‚úÖ Endpoints Intelligence trouv√©s"
        else
            echo "‚ùå Endpoints Intelligence manquants"
        fi
        
        if [ -f "docker-compose.hostinger.yml" ]; then
            echo "‚úÖ Docker Compose trouv√©"
        else
            echo "‚ùå Docker Compose manquant"
        fi
EOF
    
    log "Test du repository termin√©"
}

# Instructions post-setup
show_post_setup_instructions() {
    log "Instructions post-setup:"
    echo ""
    echo "‚úÖ Repository configur√© sur Hostinger"
    echo ""
    echo "üìã Commandes utiles:"
    echo "  - Se connecter: ssh $SSH_HOST"
    echo "  - Aller au projet: cd $PROJECT_DIR"
    echo "  - V√©rifier l'√©tat: git status"
    echo "  - Pull des modifications: git pull origin $BRANCH"
    echo ""
    echo "üîÑ Pour les mises √† jour futures:"
    echo "  - Utiliser le script: ./scripts/update-hostinger.sh"
    echo "  - Ou manuellement: ssh $SSH_HOST 'cd $PROJECT_DIR && git pull origin $BRANCH'"
    echo ""
    echo "üöÄ Pour d√©ployer:"
    echo "  - Utiliser le script: ./scripts/deploy-hostinger-rag.sh"
    echo ""
}

# Fonction principale
main() {
    log "üöÄ Setup du repository git sur Hostinger"
    log "Serveur: $SSH_HOST"
    log "Repository: $REPO_URL"
    log "Branche: $BRANCH"
    echo ""
    
    check_prerequisites
    
    if check_repository_exists; then
        warn "Repository existe d√©j√†"
        read -p "Voulez-vous le recr√©er ? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            clone_repository
        else
            log "Utilisation du repository existant"
        fi
    else
        clone_repository
    fi
    
    setup_git_config
    create_directories
    test_repository
    show_post_setup_instructions
    
    log "‚úÖ Setup du repository termin√© avec succ√®s!"
}

# Gestion des erreurs
trap 'error "Erreur lors du setup"' ERR

# Ex√©cution
main "$@" 