# Docker Compose pour déploiement MCP sur Hostinger
# Dernière mise à jour: 7 janvier 2025

services:
  # Service principal MCP
  mcp-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    image: feustey/dazno:latest
    container_name: mcp-api-hostinger
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Configuration de base
      - ENVIRONMENT=production
      - DEBUG=false
      - DRY_RUN=true
      - LOG_LEVEL=INFO
      
      # Configuration serveur
      - HOST=0.0.0.0
      - PORT=8000
      - RELOAD=false
      - WORKERS=4
      
      # Base de données MongoDB (Hostinger)
      - MONGO_URL=${MONGO_URL}
      - MONGO_NAME=${MONGO_NAME:-mcp}
      
      # Redis (Hostinger)
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_USERNAME=${REDIS_USERNAME:-default}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_SSL=${REDIS_SSL:-true}
      - REDIS_MAX_CONNECTIONS=${REDIS_MAX_CONNECTIONS:-20}
      
      # Configuration IA
      - AI_OPENAI_API_KEY=${AI_OPENAI_API_KEY}
      - AI_OPENAI_MODEL=${AI_OPENAI_MODEL:-gpt-3.5-turbo}
      - AI_OPENAI_EMBEDDING_MODEL=${AI_OPENAI_EMBEDDING_MODEL:-text-embedding-3-small}
      
      # Configuration Lightning (optionnel)
      - LIGHTNING_LND_HOST=localhost:10009
      - LIGHTNING_LND_REST_URL=https://127.0.0.1:8080
      - LIGHTNING_USE_INTERNAL_LNBITS=true
      - LIGHTNING_LNBITS_URL=http://127.0.0.1:8000/lnbits
      
      # Configuration sécurité
      - SECURITY_SECRET_KEY=${SECURITY_SECRET_KEY}
      - SECURITY_CORS_ORIGINS=${SECURITY_CORS_ORIGINS:-["*"]}
      - SECURITY_ALLOWED_HOSTS=${SECURITY_ALLOWED_HOSTS:-["*"]}
      
      # Configuration performance
      - PERF_RESPONSE_CACHE_TTL=3600
      - PERF_EMBEDDING_CACHE_TTL=86400
      - PERF_MAX_WORKERS=4
      
      # Configuration logging
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - LOG_ENABLE_STRUCTLOG=true
      - LOG_ENABLE_FILE_LOGGING=true
      - LOG_LOG_FILE_PATH=logs/mcp.log
      
      # Configuration heuristiques
      - HEURISTIC_CENTRALITY_WEIGHT=0.4
      - HEURISTIC_CAPACITY_WEIGHT=0.2
      - HEURISTIC_REPUTATION_WEIGHT=0.2
      - HEURISTIC_FEES_WEIGHT=0.1
      - HEURISTIC_UPTIME_WEIGHT=0.1
      - HEURISTIC_VECTOR_WEIGHT=0.7
      
      # Configuration Python
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./rag:/app/rag
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    security_opt:
      - no-new-privileges:true

  # Reverse proxy avec Nginx
  nginx:
    image: nginx:alpine
    container_name: mcp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - mcp-api
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring avec Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Monitoring avec Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - mcp-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Base vectorielle Qdrant pour RAG
  qdrant:
    image: qdrant/qdrant:latest
    container_name: mcp-qdrant
    restart: unless-stopped
    ports:
      - "127.0.0.1:6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
      - ./config/qdrant/config.yaml:/qdrant/config/production.yaml:ro
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__CLUSTER__ENABLED=false
      - QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_THREADS=4
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6333/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - mcp-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # Service de sauvegarde automatique
  backup:
    build:
      context: ./config/backup
      dockerfile: Dockerfile
    container_name: mcp-backup
    restart: unless-stopped
    volumes:
      - ./backups:/backups
      - grafana_data:/grafana-data:ro
      - qdrant_data:/qdrant-data:ro
      - ./logs:/app-logs:ro
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Tous les jours à 2h du matin
      - RETENTION_DAYS=30
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID:-}
    depends_on:
      - grafana
      - qdrant
    networks:
      - mcp-network
    security_opt:
      - no-new-privileges:true

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  qdrant_data:
    driver: local

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
