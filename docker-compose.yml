version: '3.8'

services:
  # Service de base MCP avec FastAPI
  mcp-api:
    build: .
    container_name: mcp-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./:/app
      - ./data:/app/data
      - ./rag:/app/rag
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - mongodb
      - redis
    networks:
      - mcp-network

  # Service MongoDB pour le stockage persistant
  mongodb:
    image: mongo:6.0
    container_name: mcp-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=mcp_db
    networks:
      - mcp-network

  # Service Redis pour le caching et les queues
  redis:
    image: redis:7.0
    container_name: mcp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mcp-network

  # Service Prometheus pour la collecte de métriques
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./grafana/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - mcp-network

  # Service Grafana pour la visualisation
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    depends_on:
      - prometheus
    networks:
      - mcp-network

  # Service batch pour les tests unitaires
  mcp-tests:
    build: .
    container_name: mcp-tests
    restart: "no"
    command: ["python3.9", "-m", "pytest", "tests/"]
    volumes:
      - ./:/app
      - ./data:/app/data
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - ENVIRONMENT=testing
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - mongodb
      - redis
    networks:
      - mcp-network

  # Service batch pour le workflow RAG
  mcp-rag-workflow:
    build: .
    container_name: mcp-rag-workflow
    restart: "no"
    command: ["/bin/bash", "run_rag_workflow.sh"]
    volumes:
      - ./:/app
      - ./data:/app/data
      - ./rag:/app/rag
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - mongodb
      - redis
    networks:
      - mcp-network

  # Service batch pour le simulateur de nœud
  mcp-simulator:
    build: .
    container_name: mcp-simulator
    restart: "no"
    command: ["python3.9", "src/tools/simulator/simulateur.py"]
    volumes:
      - ./:/app
      - ./data:/app/data
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - ENVIRONMENT=simulation
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - mongodb
      - redis
    networks:
      - mcp-network

volumes:
  mongodb_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  mcp-network:
    driver: bridge
