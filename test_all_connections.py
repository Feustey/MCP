import os
import sys
import requests
import time
import json
from dotenv import load_dotenv
import asyncio
import logging

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Charger les variables d'environnement
load_dotenv()

async def test_lnbits_connection():
    """Test de connexion √† LNBits sur le r√©seau local"""
    logger.info("üîÑ Test de connexion √† LNBits...")
    
    # URL sp√©cifi√©e par l'utilisateur
    lnbits_url = "http://192.168.0.45:5000"
    lnbits_wallet_id = "ab6380529b624321ade9ccb2aae3646b"
    lnbits_admin_key = "a271475725244124a5997ead1c7deb39"
    lnbits_invoice_key = "6139932367744b4abaf4c83a5113aca4"
    
    results = []
    
    # Test 1: API de sant√©
    try:
        start_time = time.time()
        response = requests.get(f"{lnbits_url}/api/v1/health", verify=False, timeout=5)
        duration = time.time() - start_time
        
        if response.status_code == 200:
            logger.info(f"‚úÖ Connexion √† l'API de sant√© LNBits r√©ussie ! Temps de r√©ponse: {duration:.2f}s")
            logger.info(f"R√©ponse : {response.json()}")
            results.append(True)
        else:
            logger.error(f"‚ùå Erreur de connexion √† l'API de sant√©. Code: {response.status_code}")
            logger.error(f"R√©ponse : {response.text}")
            results.append(False)
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la connexion √† l'API de sant√© LNBits : {str(e)}")
        results.append(False)
    
    # Test 2: API wallet avec authentification
    try:
        headers = {
            "X-Api-Key": lnbits_admin_key,
            "Content-type": "application/json"
        }
        
        wallet_url = f"{lnbits_url}/api/v1/wallet"
        logger.info(f"Test de l'API wallet : {wallet_url}")
        
        start_time = time.time()
        response = requests.get(wallet_url, headers=headers, verify=False, timeout=5)
        duration = time.time() - start_time
        
        if response.status_code == 200:
            logger.info(f"‚úÖ Connexion √† l'API wallet LNBits r√©ussie ! Temps: {duration:.2f}s")
            logger.info(f"R√©ponse : {str(response.json())[:100]}...")
            results.append(True)
        else:
            logger.error(f"‚ùå Erreur de connexion √† l'API wallet. Code: {response.status_code}")
            logger.error(f"R√©ponse : {response.text}")
            results.append(False)
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la connexion √† l'API wallet LNBits : {str(e)}")
        results.append(False)
    
    # Test 3: API invoice avec authentification
    try:
        headers = {
            "X-Api-Key": lnbits_invoice_key,
            "Content-type": "application/json"
        }
        
        invoice_data = {
            "out": False,
            "amount": 10,
            "memo": "Test invoice"
        }
        
        invoice_url = f"{lnbits_url}/api/v1/payments"
        logger.info(f"Test de cr√©ation d'invoice : {invoice_url}")
        
        start_time = time.time()
        response = requests.post(invoice_url, json=invoice_data, headers=headers, verify=False, timeout=5)
        duration = time.time() - start_time
        
        if response.status_code == 201:
            logger.info(f"‚úÖ Cr√©ation d'invoice LNBits r√©ussie ! Temps: {duration:.2f}s")
            logger.info(f"R√©ponse : {str(response.json())[:100]}...")
            results.append(True)
        else:
            logger.error(f"‚ùå Erreur de cr√©ation d'invoice. Code: {response.status_code}")
            logger.error(f"R√©ponse : {response.text}")
            results.append(False)
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation d'invoice LNBits : {str(e)}")
        results.append(False)
    
    # Consid√©rer le test comme r√©ussi si au moins un des endpoints r√©pond
    return any(results)

async def test_openai_connection():
    """Test de connexion √† l'API OpenAI"""
    try:
        import openai
        
        logger.info("üîÑ Test de connexion √† l'API OpenAI...")
        
        # Utiliser la cl√© API du fichier test_openai_connection.py
        api_key = "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"
        
        # Configuration du client OpenAI avec la cl√© API
        client = openai.OpenAI(api_key=api_key)
        
        # Test de cr√©ation d'embedding
        start_time = time.time()
        embedding_response = client.embeddings.create(
            model="text-embedding-ada-002",
            input="Ceci est un test de connexion √† l'API OpenAI pour v√©rifier les fonctionnalit√©s RAG."
        )
        embedding_duration = time.time() - start_time
        
        if len(embedding_response.data[0].embedding) > 0:
            logger.info(f"‚úÖ Cr√©ation d'embedding r√©ussie. Dimensions: {len(embedding_response.data[0].embedding)}, Temps: {embedding_duration:.2f}s")
        else:
            logger.error("‚ùå La cr√©ation d'embedding a √©chou√©.")
            return False
        
        # Test de compl√©tion (chat)
        start_time = time.time()
        chat_response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Vous √™tes un assistant d'analyse de n≈ìud Lightning Network."},
                {"role": "user", "content": "Comment optimiser la liquidit√© d'un n≈ìud Lightning Network?"}
            ]
        )
        chat_duration = time.time() - start_time
        
        if chat_response.choices[0].message.content:
            logger.info(f"‚úÖ Compl√©tion chat r√©ussie. Temps: {chat_duration:.2f}s")
            logger.info(f"Exemple de r√©ponse: {chat_response.choices[0].message.content[:100]}...")
            return True
        else:
            logger.error("‚ùå La compl√©tion chat a √©chou√©.")
            return False
    except ImportError:
        logger.error("‚ùå Module OpenAI non disponible. Installez-le avec 'pip install openai'.")
        return False
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la connexion √† OpenAI : {str(e)}")
        return False

async def test_local_api_endpoints():
    """Test des endpoints de l'API locale"""
    logger.info("üîÑ Test des endpoints de l'API locale...")
    
    # Liste des endpoints √† tester
    endpoints = [
        {"url": "http://localhost:5000/health", "method": "GET", "name": "Health Check"},
        {"url": "http://localhost:5000/api/v1/status", "method": "GET", "name": "API Status"}
    ]
    
    results = []
    
    for endpoint in endpoints:
        try:
            start_time = time.time()
            if endpoint["method"] == "GET":
                response = requests.get(endpoint["url"], timeout=5)
            elif endpoint["method"] == "POST":
                response = requests.post(endpoint["url"], json={}, timeout=5)
            
            duration = time.time() - start_time
            
            if response.status_code in [200, 201]:
                logger.info(f"‚úÖ Endpoint '{endpoint['name']}' accessible. Temps: {duration:.2f}s")
                results.append(True)
            else:
                logger.error(f"‚ùå Erreur sur l'endpoint '{endpoint['name']}'. Code: {response.status_code}")
                results.append(False)
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'acc√®s √† l'endpoint '{endpoint['name']}': {str(e)}")
            results.append(False)
    
    return all(results) if results else False

async def test_rag_functionality():
    """Test de base des fonctionnalit√©s RAG"""
    logger.info("üîÑ Test des fonctionnalit√©s RAG...")
    
    try:
        # Tentative d'importation du module rag
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        
        try:
            import rag
            logger.info("‚úÖ Module RAG import√© avec succ√®s")
            
            # Test si la fonction run_rag existe
            if hasattr(rag, 'run_rag'):
                logger.info("‚úÖ Fonction run_rag disponible")
                return True
            else:
                logger.warning("‚ö†Ô∏è Fonction run_rag non disponible dans le module")
                return False
                
        except ImportError:
            logger.error("‚ùå Impossible d'importer le module RAG")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test RAG: {str(e)}")
        return False

async def run_all_tests():
    """Ex√©cute tous les tests de connexion et de fonctionnalit√©"""
    logger.info("üöÄ D√©marrage des tests de connexion et de fonctionnalit√©...")
    
    # Liste des tests √† ex√©cuter
    tests = [
        {"func": test_lnbits_connection, "name": "Connexion LNBits"},
        {"func": test_openai_connection, "name": "Connexion OpenAI"},
        {"func": test_local_api_endpoints, "name": "Endpoints API locale"},
        {"func": test_rag_functionality, "name": "Fonctionnalit√©s RAG"}
    ]
    
    results = {}
    for test in tests:
        logger.info(f"\n{'='*50}\nüß™ Test: {test['name']}\n{'='*50}")
        try:
            start_time = time.time()
            success = await test["func"]()
            duration = time.time() - start_time
            
            results[test["name"]] = {
                "success": success,
                "duration": duration
            }
        except Exception as e:
            logger.error(f"‚ùå Exception non g√©r√©e pendant le test '{test['name']}': {str(e)}")
            results[test["name"]] = {
                "success": False,
                "duration": 0,
                "error": str(e)
            }
    
    # Afficher le r√©sum√© des tests
    logger.info("\n" + "="*50)
    logger.info("üìä R√âSUM√â DES TESTS")
    logger.info("="*50)
    
    success_count = sum(1 for result in results.values() if result["success"])
    for name, result in results.items():
        status = "‚úÖ SUCC√àS" if result["success"] else "‚ùå √âCHEC"
        logger.info(f"{status} - {name} ({result['duration']:.2f}s)")
    
    logger.info(f"\nR√©sultat final: {success_count}/{len(tests)} tests r√©ussis")
    
    return success_count == len(tests)

if __name__ == "__main__":
    asyncio.run(run_all_tests()) 